"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[745],{4745:(n,e,t)=>{t.d(e,{markdownContent:()=>s});let s={"brand-power-patent-certification":"![증명서](brand-power-patent-certification-combined.png)","sample-test-document":'# 샘플 테스트 문서\n\n이 문서는 마크다운 전처리 시스템을 테스트하기 위한 샘플 문서입니다.\n\n## 주요 기능\n\n### 1. 마크다운 문법 테스트\n\n다양한 마크다운 문법이 제대로 HTML로 변환되는지 확인합니다:\n\n- **굵은 글씨** 처리\n- *기울임* 처리  \n- `코드 스팬` 처리\n- [링크](https://example.com) 처리\n\n### 2. 코드 블록\n\n```javascript\nfunction testMarkdown() {\n  console.log("마크다운 전처리가 잘 되고 있나요?");\n  return "성공!";\n}\n```\n\n```python  \ndef hello_world():\n    print("Python 코드도 하이라이팅이 될까요?")\n    return True\n\n# 클래스와 함수 정의\nclass DataProcessor:\n    def __init__(self, data):\n        self.data = data\n    \n    def process(self):\n        """데이터를 처리하는 함수"""\n        result = []\n        for item in self.data:\n            if isinstance(item, str):\n                result.append(item.upper())\n        return result\n```\n\n```typescript\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\nconst fetchUser = async (id: number): Promise<User> => {\n  const response = await fetch(`/api/users/${id}`);\n  const user: User = await response.json();\n  return user;\n};\n\n// React Hook 예시\nconst useUser = (id: number) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  \n  useEffect(() => {\n    fetchUser(id).then(setUser).finally(() => setLoading(false));\n  }, [id]);\n  \n  return { user, loading };\n};\n```\n\n### 3. 목록 처리 (계층적 테스트)\n\n#### 순서가 있는 목록\n1. 첫 번째 항목\n   1. 하위 항목 1-1\n   2. 하위 항목 1-2\n      1. 더 깊은 항목 1-2-1\n      2. 더 깊은 항목 1-2-2\n         1. 최대 깊이 항목 1-2-2-1\n2. 두 번째 항목\n   1. 하위 항목 2-1\n3. 세 번째 항목\n\n#### 순서가 없는 목록\n- 항목 A\n  - 하위 항목 A-1\n  - 하위 항목 A-2\n    - 더 깊은 항목 A-2-1\n    - 더 깊은 항목 A-2-2\n      - 최대 깊이 항목 A-2-2-1\n- 항목 B\n  - 하위 항목 B-1\n- 항목 C\n\n### 4. 인용문 및 코드 스팬 테스트\n\n> 이것은 인용문입니다. \n> 마크다운 전처리 시스템이 제대로 작동한다면\n> 이 텍스트가 스타일이 적용된 인용문으로 표시될 것입니다.\n\n인라인 코드 예시: `console.log("Hello World")`, `npm install`, `useState`, `async/await`\n\n더 많은 인라인 코드: `React.useState()`, `document.querySelector(".class")`, `Object.keys(data)`, `Array.map()` 등을 테스트해보세요.\n\n> **중요한 노트**: 이것은 중요한 인용문입니다. \n> `코드 스팬`도 인용문 안에서 잘 작동해야 합니다.\n\n### 5. 표\n\n| 항목 | 설명 | 상태 |\n|------|------|------|\n| 전처리 | 마크다운→HTML 변환 | ✅ |\n| 렌더링 | HTML 직접 표시 | ✅ |\n| 최적화 | ReactMarkdown 제거 | ✅ |\n\n## 결론\n\n이 문서를 통해 다음 사항들을 확인할 수 있습니다:\n\n1. **unified** 라이브러리를 통한 마크다운→HTML 변환\n2. **빌드 시점 전처리**로 런타임 성능 최적화\n3. **개별 HTML 파일** 생성 및 정적 서빙\n4. **ReactMarkdown 제거**로 번들 크기 감소\n\n모든 기능이 정상 작동한다면 마크다운 전처리 시스템 구현이 성공적으로 완료된 것입니다! \uD83C\uDF89'}}}]);